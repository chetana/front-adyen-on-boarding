#!/bin/bash

# Script de v√©rification de s√©curit√© pour le projet front-adyen-on-boarding
# V√©rifie qu'aucune cl√© API sensible n'est pr√©sente dans le code source

echo "üîç V√©rification de s√©curit√© en cours..."
echo "=================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteur d'erreurs
ERRORS=0

# Fonction pour afficher les erreurs
show_error() {
    echo -e "${RED}‚ùå ERREUR: $1${NC}"
    ERRORS=$((ERRORS + 1))
}

# Fonction pour afficher les avertissements
show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: $1${NC}"
}

# Fonction pour afficher les succ√®s
show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

echo "1. V√©rification des cl√©s API Adyen..."

# Recherche de cl√©s API Adyen (commencent par AQE)
if grep -r "AQE[a-zA-Z0-9+/=\-_]" src/ --exclude-dir=node_modules 2>/dev/null; then
    show_error "Cl√©s API Adyen d√©tect√©es dans le code source!"
else
    show_success "Aucune cl√© API Adyen trouv√©e dans le code source"
fi

echo ""
echo "2. V√©rification des patterns de cl√©s sensibles..."

# Recherche de patterns suspects
PATTERNS=(
    "api.*key.*=.*['\"][a-zA-Z0-9+/=\-_]{20,}['\"]"
    "secret.*=.*['\"][a-zA-Z0-9+/=\-_]{20,}['\"]"
    "token.*=.*['\"][a-zA-Z0-9+/=\-_]{20,}['\"]"
    "password.*=.*['\"][^'\"]{8,}['\"]"
)

for pattern in "${PATTERNS[@]}"; do
    if grep -rE "$pattern" src/ --exclude-dir=node_modules 2>/dev/null; then
        show_error "Pattern suspect d√©tect√©: $pattern"
    fi
done

echo ""
echo "3. V√©rification du .gitignore..."

# V√©rifier que les fichiers sensibles sont ignor√©s
REQUIRED_IGNORES=(
    ".env"
    ".env.local"
    "config.json"
)

for ignore in "${REQUIRED_IGNORES[@]}"; do
    if grep -q "$ignore" .gitignore; then
        show_success "$ignore est ignor√© par Git"
    else
        show_error "$ignore n'est pas dans le .gitignore"
    fi
done

echo ""
echo "4. V√©rification des fichiers de configuration..."

# V√©rifier qu'aucun fichier de config avec des cl√©s n'existe
CONFIG_FILES=(
    "config.json"
    ".env"
    "secrets.json"
)

for config in "${CONFIG_FILES[@]}"; do
    if [ -f "$config" ]; then
        show_warning "Fichier de configuration d√©tect√©: $config"
        if grep -q "AQE" "$config" 2>/dev/null; then
            show_error "Cl√©s API d√©tect√©es dans $config"
        fi
    fi
done

echo ""
echo "5. V√©rification des placeholders..."

# V√©rifier que les placeholders sont utilis√©s
if grep -q "YOUR_.*_API_KEY_HERE" src/components/ConfigurationPanel.vue; then
    show_success "Placeholders s√©curis√©s utilis√©s dans ConfigurationPanel.vue"
else
    show_error "Placeholders manquants dans ConfigurationPanel.vue"
fi

echo ""
echo "=================================="

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ V√©rification de s√©curit√© r√©ussie! Aucun probl√®me d√©tect√©.${NC}"
    exit 0
else
    echo -e "${RED}üí• $ERRORS erreur(s) de s√©curit√© d√©tect√©e(s)!${NC}"
    echo -e "${RED}Veuillez corriger ces probl√®mes avant de commiter.${NC}"
    exit 1
fi